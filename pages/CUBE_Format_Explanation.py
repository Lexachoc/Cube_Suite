import streamlit as st
import platform
import tempfile
import os
import py3Dmol
import streamlit.components.v1 as components
import subprocess
import sys

# Set page config
st.set_page_config(page_title='Cube Suite - A web app (GUI) for Cube Toolz', layout='wide', page_icon="ðŸ§Š",
menu_items={
         'About': "A web app to help you process CUBE files generated by quantum chemistry programs. Powered by [CUBE TOOLZ](https://github.com/funkymunkycool/Cube-Toolz/tree/master)"
     })

# Sidebar stuff
st.sidebar.write('# About')
st.sidebar.write('Originally Made By [Manas Sharma](https://manas.bragitoff.com)')
st.sidebar.write('### *Powered by*')
st.sidebar.write('* [Cube Toolz](https://github.com/funkymunkycool/Cube-Toolz/tree/master) for manipulating and processing cube files')
st.sidebar.write('* [Py3Dmol](https://3dmol.csb.pitt.edu/) for Cube File Visualizations')
st.sidebar.write('* [Streamlit](https://streamlit.io/) for making of the Web App')
st.sidebar.write('### *Contributors*')
st.sidebar.write('[Ya-Fan Chen ](https://github.com/Lexachoc)')
st.sidebar.write('### *Source Code*')
st.sidebar.write('[GitHub Repository](https://github.com/manassharma07/Cube_Suite)')

def display_cube_file(file_content_text, viz1_html_name, isovalue, opacity):
    spin = st.checkbox('Spin', value=False, key='key' + 'viz1.html')
    view = py3Dmol.view(width=500, height=400)
    view.addModel(file_content_text, 'cube')
    view.setStyle({'sphere': {'colorscheme': 'Jmol', 'scale': 0.3}, 'stick': {'colorscheme': 'Jmol', 'radius': 0.2}})
    view.addUnitCell()

    # Negative lobe
    view.addVolumetricData(file_content_text, 'cube', {'isoval': -abs(isovalue), 'color': 'blue', 'opacity': opacity})

    # Positive lobe
    view.addVolumetricData(file_content_text, 'cube', {'isoval': abs(isovalue), 'color': 'red', 'opacity': opacity})

    view.zoomTo()
    view.spin(spin)
    view.setClickable({'clickable': 'true'})
    view.enableContextMenu({'contextMenuEnabled': 'true'})
    view.show()
    view.render()

    t = view.js()
    f = open(viz1_html_name, 'w')
    f.write(t.startjs)
    f.write(t.endjs)
    f.close()

    HtmlFile = open(viz1_html_name, 'r', encoding='utf-8')
    source_code = HtmlFile.read()
    components.html(source_code, height=300, width=500)
    HtmlFile.close()


# Introduction
st.write("""
### CUBE File Format Explained

The CUBE file format is used to represent three-dimensional volumetric data along with the positions of atoms. 
It was introduced by the Gaussian computational chemistry software package. The file is divided into two main parts: a header section and the volumetric data section.
The header section contains information about the atoms present in the system, such as the number of atoms, their charges, and their Cartesian coordinates. 
It also specifies the dimensions and orientation of the volumetric data grid, including the number of voxels (volume elements) along each axis, the length of each voxel side, and the vectors representing the axes of the grid. 
Originally, integer values in the header were formatted using 5 characters, while floating-point values were formatted using 12 characters with 6 decimal places.
The volumetric data section consists of a single floating-point value for each voxel in the grid, representing the scalar value (e.g., electron density, molecular orbital, etc.) at that point in space. 
Traditionally, the data is arranged with the x-axis as the outer loop, the y-axis as the middle loop, and the z-axis as the inner loop, but most parsing programs can handle various whitespace-separated formats.
""")

# Header
st.write("""
#### Header

The header section of the CUBE file format follows a specific structure:
The initial two lines typically contain comments or labels, which are generally disregarded or utilized as default labels by parsing programs. 
         
The third line specifies the total number of atoms present in the file, followed by the coordinates of the origin point for the volumetric data.

The subsequent three lines provide information about the dimensions of the volumetric data grid. 
Each line corresponds to one of the three axes (x, y, z) and includes two pieces of information: the number of voxels along that axis and the vector representing the axis direction. It is important to note that the volumetric data grid need not be aligned with the coordinate axes, and it can even be sheared, although most volumetric data visualization packages may not support such sheared representations. The length of each axis vector represents the side length of a single voxel, allowing for non-cubic volumetric data grids.
The sign of the number of voxels along each dimension determines the units used for that axis. 
If the sign is positive, the units are in Bohr; if the sign is negative, the units are in Angstroms.
         
The final section of the header consists of one line for each atom in the system. 
Each line contains five numerical values: the first value represents the atom number, the second value represents the atomic charge, and the remaining three values correspond to the x, y, and z coordinates of the atom's center.""")

# Volumetric data
st.write("""
#### Volumetric data

The volumetric data is straightforward, one floating point number for each volumetric element. 
The original Gaussian format arranged the values in the format shown below in the example, most parsing programs can read any white space separated format. 
Traditionally the grid is arranged with the x axis as the outer loop and the z axis as the inner loop, for example, written as
""")
st.code("""
for (ix=0;ix<NX;ix++) {
      for (iy=0;iy<NY;iy++) {
         for (iz=0;iz<NZ;iz++) {
            printf("%g ",data[ix][iy][iz]);
            if (iz % 6 == 5)
               printf("\\n");
         }
         printf("\\n");
      }
   }
""")

# Example
st.write("""
#### Example

In the following example the volumetric data is a 40 by 40 by 40 grid, each voxel is 0.283459 units wide and the volume is aligned with the coordinate axis. 
There are three atoms.
""")
st.code('''
CPMD CUBE FILE.
 OUTER LOOP: X, MIDDLE LOOP: Y, INNER LOOP: Z
    3    0.000000    0.000000    0.000000
   40    0.283459    0.000000    0.000000
   40    0.000000    0.283459    0.000000
   40    0.000000    0.000000    0.283459
    8    0.000000    5.570575    5.669178    5.593517
    1    0.000000    5.562867    5.669178    7.428055
    1    0.000000    7.340606    5.669178    5.111259
 -0.25568E-04  0.59213E-05  0.81068E-05  0.10868E-04  0.11313E-04  0.35999E-05
      :             :             :           :            :            :
      :             :             :           :            :            :
      :             :             :           :            :            :
        In this case there will be 40 x 40 x 40 floating point values
      :             :             :           :            :            :
      :             :             :           :            :            :
      :             :             :           :            :            :
''')

st.write('#### Reference:  ')
st.write('[https://paulbourke.net/dataformats/cube/](https://paulbourke.net/dataformats/cube/)')